name: Continuous Integration (CI)

on:
  pull_request:
    branches: ["main"]

  push:
    branches: ["main"]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - uses: actions/checkout@v4

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.17.0

      # Step 3: Install dependencies
      - run: npm install

      - name: Set database environment variables
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> $GITHUB_ENV
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> $GITHUB_ENV
          echo "DB_USER=${{ secrets.DB_USER }}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> $GITHUB_ENV
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> $GITHUB_ENV
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> $GITHUB_ENV
          echo "REFRESH_TOKEN_SECRET=${{ secrets.REFRESH_TOKEN_SECRET }}" >> $GITHUB_ENV

      # Step 5: Test database connection
      - name: Test database connection
        run: |
          mysql -h $DB_HOST -P $DB_PORT -u $DB_USER -p$DB_PASSWORD -e "USE $DB_NAME; SHOW TABLES;"
        env:
          NODE_ENV: production
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
      - name: Run lint
        run: npm run eslint

      # Step 4: Run tests
      - name: Run tests
        run: npm test

      # Step 5: Get application version
      - name: Get application version
        run: |
          VERSION=$(node -e "console.log(require('./package.json').version)")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Step 6: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 7: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t heilrose/backend-test:${{ env.VERSION }} .

      # Step 8: Push Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: |
          docker push heilrose/backend-test:${{ env.VERSION }}
